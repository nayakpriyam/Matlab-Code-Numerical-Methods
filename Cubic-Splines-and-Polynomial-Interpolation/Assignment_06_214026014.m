%CL701 - Computational Methods in Chemical Engineering
%Assignment 6
%Cubic Splines and Polynomial Interpolation
%Priyam Nayak - 214026014

clear all
close all
clc

%Given wavelength data
z = [-2.305; -1.839; -1.374; -0.908; -0.443; 0.023; 0.691; 0.954; 1.419];
%Given intensity data
u = [0.0604; 0.3487; 1.2137; 2.5707; 3.3012; 2.5691; 1.2201; 0.3458; 0.0701];

%plotting the given wavelength vs intensity data from table 1
fig = figure();
set(fig,'color','white')
set(gca,'FontSize',18)
p1 = plot(z,u,'*-b','MarkerSize',10);
xlabel('Wavelength(\AA)','Interpreter','latex','Fontname','TimesNewRoman'),ylabel('Intensity','Interpreter','latex','Fontname','TimesNewRoman'), title('Cubic Splines and Polynomial Interpolation','Interpreter','latex','Fontname','TimesNewRoman')
grid on
hold on

%Part 1 - Fitting interpolating polynomial of order 8 for given data

%Vandermonde Matrix
nz = length(z);
A = zeros(nz,nz);
for i = 1:nz
    for j = 1:nz
        A(i,j) = z(i)^(j-1);
    end
end

%Finding the coefficients of the interpolating 8th degree polynomial
coeff = A\u;

%Printing the interpolating 8th degree poynomial
fprintf('The 8th degree polynomial is:\n u = %f + %f*Z + %f*Z^2 + %f*Z^3 + %f*Z^4 + %f*Z^5 + %f*Z^6 + %f*Z^7 + %f*Z^8\n', ...
    coeff(1), coeff(2), coeff(3), coeff(4), coeff(5), coeff(6), coeff(7), coeff(8), coeff(9));

%Generating the intensity values for wavelength = -2.305:0.01:1.419 from
%the interpolating 8th degree polynomial and plotting the data
dz = 0.01;
Z = -2.305:dz:1.419;
nZ = length(Z);
for i = 1:nZ
U(i) = coeff(1) + coeff(2)*Z(i) + coeff(3)*Z(i)^2 + coeff(4)*Z(i)^3 + coeff(5)*Z(i)^4 + coeff(6)*Z(i)^5 + coeff(7)*Z(i)^6 + coeff(8)*Z(i)^7 + coeff(9)*Z(i)^8;
end
p2 = plot(Z,U,'-r');

%Part 2 - Fitting Cubic Splines for the given data

Nz = length(z)-1;
for i=1:1:Nz
    delz(i)=z(i+1)-z(i);
end

%Obtaining A matrix having coefficient of a2,i
AA=zeros(Nz);
for i=1:1:(Nz)
    if i==1
    AA(i,i)=1;
    elseif i==(Nz)
    AA(i,i-1) = (1/3)*(delz(i-1));    
    AA(i,i)   = (2/3)*(delz(i-1)+delz(i));
    else
    AA(i,i-1) = delz(i-1);
    AA(i,i)   = 2*(delz(i)+delz(i-1));
    AA(i,i+1) = delz(i);
    end
end

%Assembing b vector
b=zeros(Nz,1);
for i=1:1:Nz
    if i==1
       b(i)=0;
    elseif i==Nz
       b(i)= (u(i+1)/delz(i)) - ((1/delz(i))+(1/delz(i-1)))*u(i) + (u(i-1)/delz(i-1));
    else
       b(i)= 3*((u(i+1)-u(i))/delz(i)) - 3*((u(i)-u(i-1))/delz(i-1));
    end
end


%Obtaining the a2 vector
a2 = (AA\b)' ;


%Obtaining the a0 vector
for i=1:1:Nz
    a0(i) = u(i);
end

%Obtaining the a3 vector
for i=1:1:Nz
    if i<Nz
       a3(i)= (a2(i+1)-a2(i))/(3*delz(i));
    else
       a3(i)= -a2(i)/(3*delz(i));
    end
end

%Obtaining the a1 vector
for i=1:1:Nz
    if i<Nz
       a1(i)= ((a0(i+1)-a0(i))/delz(i)) - (delz(i)/3)*(2*a2(i)+a2(i+1));
    else
       a1(i)= ((u(i+1)-a0(i))/delz(i)) - (delz(i)*a2(i)) - (a3(i)*(delz(i))^2);
    end
end

%Printing the cubic spline polynomials and plotting the data
for i=1:1:Nz
fprintf('\n for z belongs to [%f,%f], the cubic spline polynomial is \n P%d(Z) = %f + %f(Z-(%f)) + %f(Z-(%f))^2 + %f(Z-(%f))^3 \n ', z(i), z(i+1), i, a0(i), a1(i), z(i), a2(i), z(i), a3(i), z(i));
end
k=0;
for i=-2.305:0.01:1.419
    k=k+1;
    for j=1:1:Nz
        if z(j)<=i && i<=z(j+1)
           P(k) = a0(j) + a1(j)*(i-z(j)) + a2(j)*(i-z(j))^2 + a3(j)*(i-z(j))^3 ;
           break
        end
    end
end
p3 = plot(Z,P,'color','#77AC30');

legend([p1 p2 p3],'Data in Table 1(Given Wavelength-Intensity Data)','Intensity values generated by interpolating 8th degree polynomial','Intensity values generated by cubic splines','Interpreter','latex','Fontname','TimesNewRoman')